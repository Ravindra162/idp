generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  BLOCKED
  PRO
  LEADER
  CUSTOM_ROLE
}

enum Reason {
  WITHDRAWAL
  ORDER
  ADD_MONEY
}

enum PaymentType {
  MANUAL
  PAYMENT_GATEWAY
}

enum MoneyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum WalletFlowStatus {
  PENDING
  SUCCESS
  FAILED
  TERMINATED
}

enum RequestStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id                String              @id @default(uuid()) @map("_id")
  email             String              @unique
  name              String
  number            String
  password          String
  totalMoney        Int                 @default(0)
  role              UserRole            @default(USER)
  createdAt         DateTime            @default(now()) @map("created_at")
  paymentType       PaymentType         @default(MANUAL)
  money             Money[]
  withdrawalRequest WithdrawalRequest[]
  orders            Order[]
  products          Product[]
  news              News[]
  proUser           ProUser?
  feedback          Feedback[]
  bankDetails       BankDetails[]
  walletFlow        WalletFlow[]
  support           Support?
  settings          Settings[]
  payments          Payment[]
  wallets           Wallet[]
  teams             Team[]              
  roles             Role[]              @relation(fields: [roleIds], references: [id])
  roleIds           String[]
}

model Domain {
  id             String           @id @default(uuid()) @map("_id")
  name           String           @unique
  base_url       String           @unique
  products       ProductInfo[]
  createdAt      DateTime         @default(now()) @map("created_at")
  paymentMethods PaymentMethod[]  @relation(fields: [paymentMethodIds], references: [id])
  paymentMethodIds String[]
}

model Role {
  id          String    @id @default(uuid()) @map("_id")
  name        String    @unique
  permissions String[]
  users       User[]    @relation(fields: [userIds], references: [id])
  userIds     String[]
}

model Currency {
  id        String    @id @default(uuid()) @map("_id")
  name      String    @unique
  symbol    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt
  wallets   Wallet[]
}

model Settings {
  id                String   @id @default(uuid()) @map("_id")
  automaticVariable Boolean
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt
}

model BankDetails {
  id             String   @id @default(uuid()) @map("_id")
  public_id      String   @unique
  secure_url     String
  upiid          String
  upinumber      String
  accountDetails String
  ifsccode       String
  accountType    String
  name           String
  bankName       String
  role           UserRole @default(ADMIN)
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now()) @map("created_at")
}

model ProUser {
  id           String        @id @default(uuid()) @map("_id")
  amount_limit Int
  products     ProductInfo[]
  proRecharge  Boolean       @default(false)
  isRecharged  Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @unique
}

model Wallet {
  id           String   @id @default(uuid()) @map("_id")
  userId       String
  currencyCode String
  balance      Float    @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  currency     Currency @relation(fields: [currencyCode], references: [id])
}

model Money {
  id                String      @id @default(uuid()) @map("_id")
  name              String
  amount            String?
  upiId             String
  from_wallet_id    String
  to_wallet_id      String
  payment_method_id String
  accountNumber     String?
  transactionId     String      @unique
  public_id         String      @unique
  secure_url        String
  reason            String?
  paymentProces     Boolean     @default(false)
  paymentMode       PaymentType
  counter           Int         @default(0)
  status            MoneyStatus @default(PENDING)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime    @default(now()) @map("created_at")
  walletFlow        WalletFlow?
}

model WithdrawalRequest {
  id              String        @id @default(uuid()) @map("_id")
  userId          String
  name            String
  accountNumber   String
  ifscCode        String
  beneficiaryName String
  withdrawAmount  String
  transactionId   String?
  secure_url      String?
  public_id       String?
  reason          String?
  status          RequestStatus @default(PENDING)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt
}

model PaymentMethod {
  id             String    @id @default(uuid()) @map("_id")
  name           String    @unique
  methodId       String    @unique
  currencyCode   String
  public_id      String    @unique
  secure_url     String
  upiId          String
  upiNumber      String
  accountDetails String
  ifscCode       String
  accountType    String
  bankName       String
  metaDataId     String
  allowedDomains Domain[]  @relation(fields: [domainIds], references: [id])
  domainIds      String[]
  metaData       PaymentMetaData  @relation(fields: [metaDataId], references: [id])
  payments       Payment[]
}

model Payment {
  id            String      @id @default(uuid()) @map("_id")
  userId        String
  methodId      String
  amount        Float
  status        MoneyStatus @default(PENDING)
  currencyCode  String
  transactionId String      @unique
  createdAt     DateTime    @default(now()) @map("created_at")
  processedAt   DateTime?
  user          User        @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [methodId], references: [id])

  @@index([userId, status])
}

model WalletFlow {
  id           String           @id @default(uuid()) @map("_id")
  moneyId      String           @unique
  walletId     String           @unique
  currencyCode String
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  money        Money            @relation(fields: [moneyId], references: [id])
  amount       Float
  reason       Reason
  status       WalletFlowStatus @default(PENDING)
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt
}

model Support {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid()) @map("_id")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productName String   @unique
  description String
  price       Float
  minProduct  Int
  maxProduct  Int
  stock       Int
  sheetLink   String
  sheetName   String
  visibleToAll  Boolean @default(true)
  includedTeams Team[] @relation("IncludedTeams", fields: [includedTeamIds], references: [id])
  includedTeamIds String[]
  excludedTeams Team[] @relation("ExcludedTeams", fields: [excludedTeamIds], references: [id])
  excludedTeamIds String[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id])
  orderedProducts productOrdered[]
}

model ProductInfo {
  id        String    @id @default(uuid()) @map("_id")
  productId String
  name      String
  Min       Int
  Max       Int
  Price     Float
  domain    Domain?   @relation(fields: [domainId], references: [id])
  domainId  String?
  proUser   ProUser?  @relation(fields: [proUserId], references: [id])
  proUserId String?
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Order {
  id        String           @id @default(uuid()) @map("_id")
  orderId   String           @unique
  name      String
  userId    String
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  productOrdered[]
  files     Json?
  amount    Int
  reason    String?
  status    OrderStatus      @default(PENDING)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt
  feedback  Feedback?

  Product Product[]
}

model productOrdered {
  id        String   @id @default(uuid()) @map("_id")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}

model Feedback {
  id               String   @id @default(uuid()) @map("_id")
  orderId          String   @unique
  order            Order    @relation(fields: [orderId], references: [id])
  feedback         String
  reply            String?
  userId           String?
  public_id        String?  @unique
  secure_url       String?
  fileName         String?
  reply_fileName   String?
  reply_public_id  String?
  reply_secure_url String?
  replyStatus      Boolean  @default(false)
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt
}

model News {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Team {
  id           String        @id @default(uuid()) @map("_id")
  teamId       String        @unique
  name         String
  referralCode String
  leaderId     String
  leader       User          @relation(fields: [leaderId], references: [id])
  products     ProductInfo[]
  includedIn   Product[]     @relation("IncludedTeams", fields: [includedInIds], references: [id])
  includedInIds String[]
  excludedFrom Product[]     @relation("ExcludedTeams", fields: [excludedFromIds], references: [id])
  excludedFromIds String[]
  domainId     String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt
}

model PaymentMetaData {
  id            String          @id @default(uuid()) @map("_id")
  authToken     String
  usersTypeTag  UserRole        @default(USER)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt
  expiry        DateTime
  paymentMethods PaymentMethod[]
}