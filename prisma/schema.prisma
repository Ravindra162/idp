generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  BLOCKED
  PRO
  LEADER
  CUSTOM_ROLE
}

enum Reason {
  WITHDRAWAL
  ORDER
  ADD_MONEY
}

enum PaymentType {
  MANUAL
  PAYMENT_GATEWAY
  CUSTOM_METHOD
}

enum MoneyStatus {
  PENDING
  SUCCESS
  FAILED
}

enum WalletFlowStatus {
  PENDING
  SUCCESS
  FAILED
  TERMINATED
}

enum RequestStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ACTYPE {
  SAVINGS
  CURRENT
  CUSTOM
}

model User {
  id                String              @id @default(uuid()) @map("_id")
  email             String              @unique
  name              String
  number            String
  password          String
  role              UserRole            @default(USER)
  createdAt         DateTime            @default(now()) @map("created_at")
  teamId            String?
  money             Money[]
  domainId          String?
  withdrawalRequest WithdrawalRequest[]
  orders            Order[]
  products          Product[]
  news              News[]
  proUser           ProUser?
  feedback          Feedback[]
  walletFlow        WalletFlow[]
  support           Support?
  settings          Settings[]
  payments          Payment[]
  paymentTypes      PaymentTypeModel[]
  wallets           Wallet[]
  team              Team?
  domain_url        Domain?             @relation(fields: [domainId], references: [id])
  custom_roles      CustomRole[]
}

model CustomRole {
  id          String   @id @default(uuid()) @map("_id")
  name        String   @unique
  permissions String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Domain {
  id               String        @id @default(uuid()) @map("_id")
  name             String        @unique
  base_url         String        @unique
  products         ProductInfo[]
  createdAt        DateTime      @default(now()) @map("created_at")
  settingsId       String
  support          Support[]
  users            User[]
}

model PaymentTypeModel {
  id                String      @id @default(uuid()) @map("_id")
  public_id         String      @unique
  secure_url        String
  upiid             String?
  upinumber         String?
  accountDetails    String?
  ifsccode          String?
  accountType       String?
  name              String?
  bankName          String?
  role              UserRole    @default(ADMIN)
  paymentTypeMethod PaymentType @default(MANUAL)
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime    @default(now()) @map("created_at")
}


model WalletType {
  id           String        @id @default(uuid()) @map("_id")
  name         String        @unique
  currencyCode     String
  description  String?
  wallets      Wallet[]
  domainId     String[]
  paymentType  PaymentType[]
  cstpaymentId String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt
}

model Settings {
  id         String   @id @default(uuid()) @map("_id")
  domainId  String
  domainName String
  autmVar    Boolean
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt
}

model ProUser {
  id           String        @id @default(uuid()) @map("_id")
  amount_limit Int
  products     ProductInfo[]
  proRecharge  Boolean       @default(false)
  isRecharged  Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @unique
}

model Wallet {
  id           String        @id @default(uuid()) @map("_id")
  userId       String
  currencyCode String
  walletTypeId String?
  walletName   String
  paymentType  PaymentType[]
  cstpaymentId String?
  balance      Float         @default(0)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  walletType   WalletType?   @relation(fields: [walletTypeId], references: [id])
}

model Money {
  id                  String           @id @default(uuid()) @map("_id")
  name                String
  amount              String?
  upiId               String
  payment_method_id   String
  accountNumber       String?
  accountType         ACTYPE           @default(SAVINGS)
  paymentType         PaymentType      @default(MANUAL)
  bankName            String?
  ifscCode            String?
  transactionId       String           @unique
  public_id           String?          @unique
  secure_url          String?
  reason              String?
  paymentProces       Boolean          @default(false)
  paymentMode         PaymentType
  counter             Int              @default(0)
  status              MoneyStatus      @default(PENDING)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  domainId            String
  createdAt           DateTime         @default(now()) @map("created_at")
  walletFlow          WalletFlow?
  paymentMetaData     PaymentMetaData? @relation(fields: [payment_metaData_id], references: [id])
  payment_metaData_id String?
  payments            Payment[]
}

model WithdrawalRequest {
  id              String        @id @default(uuid()) @map("_id")
  userId          String
  name            String
  accountNumber   String
  ifscCode        String
  beneficiaryName String
  withdrawAmount  String
  transactionId   String?
  secure_url      String?
  public_id       String?
  reason          String?
  status          RequestStatus @default(PENDING)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt
}


model Payment {
  id            String      @id @default(uuid()) @map("_id")
  userId        String
  methodId      String
  amount        Float
  status        MoneyStatus @default(PENDING)
  currencyCode  String
  transactionId String      @unique
  createdAt     DateTime    @default(now()) @map("created_at")
  processedAt   DateTime?
  user          User        @relation(fields: [userId], references: [id])
  paymentMethod Money       @relation(fields: [methodId], references: [id])

  @@index([userId, status])
}

model WalletFlow {
  id           String           @id @default(uuid()) @map("_id")
  moneyId      String           @unique
  walletId     String           @unique
  currencyCode String
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  money        Money            @relation(fields: [moneyId], references: [id])
  amount       Float
  reason       Reason
  status       WalletFlowStatus @default(PENDING)
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt
}

model Support {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      String
  domainId  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  domain    Domain?  @relation(fields: [domainId], references: [id])
}

model Product {
  id              String           @id @default(uuid()) @map("_id")
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  productName     String           @unique
  description     String
  price           Float
  minProduct      Int
  maxProduct      Int
  stock           Int
  sheetLink       String
  sheetName       String
  visibleToAll    Boolean          @default(true)
  includedTeams   Team[]           @relation("IncludedTeams", fields: [includedTeamIds], references: [id])
  includedTeamIds String[]
  excludedTeams   Team[]           @relation("ExcludedTeams", fields: [excludedTeamIds], references: [id])
  excludedTeamIds String[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt
  orderId         String?
  order           Order?           @relation(fields: [orderId], references: [id])
  orderedProducts productOrdered[]
}

model ProductInfo {
  id        String   @id @default(uuid()) @map("_id")
  productId String
  name      String
  Min       Int
  Max       Int
  Price     Float
  domain    Domain?  @relation(fields: [domainId], references: [id])
  domainId  String?
  proUser   ProUser? @relation(fields: [proUserId], references: [id])
  proUserId String?
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Order {
  id        String           @id @default(uuid()) @map("_id")
  orderId   String           @unique
  name      String
  userId    String
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  productOrdered[]
  files     Json?
  amount    Int
  reason    String?
  status    OrderStatus      @default(PENDING)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt
  feedback  Feedback?
  Product   Product[]
}

model productOrdered {
  id        String   @id @default(uuid()) @map("_id")
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
}

model Feedback {
  id               String   @id @default(uuid()) @map("_id")
  orderId          String   @unique
  order            Order    @relation(fields: [orderId], references: [id])
  feedback         String
  reply            String?
  userId           String?
  public_id        String?  @unique
  secure_url       String?
  fileName         String?
  reply_fileName   String?
  reply_public_id  String?
  reply_secure_url String?
  replyStatus      Boolean  @default(false)
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt
}

model News {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Team {
  id              String        @id @default(uuid()) @map("_id")
  teamId          String        @unique
  name            String
  referralCode    String
  leaderId        String        @unique
  products        ProductInfo[]
  includedIn      Product[]     @relation("IncludedTeams", fields: [includedInIds], references: [id])
  includedInIds   String[]
  excludedFrom    Product[]     @relation("ExcludedTeams", fields: [excludedFromIds], references: [id])
  excludedFromIds String[]
  domainId        String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt
  leader          User          @relation(fields: [leaderId], references: [id])
}

model PaymentMetaData {
  id             String   @id @default(uuid()) @map("_id")
  authToken      String
  usersTypeTag   UserRole @default(USER)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt
  expiry         DateTime
  paymentMethods Money[]
}
